{"version":3,"sources":["store/actions/post.js","store/actions/actionTypes.js","util/util.js","components/PostList.js","components/PostForm.js","components/ErrorPage.js","components/Home.js","store/reducers/post.js","App.js","serviceWorker.js","index.js"],"names":["fetchAllPosts","posts","type","initializeApp","apiKey","databaseURL","firebaseDatabase","database","fetchAllPost","a","ref","once","snapshot","forEach","childSnapshot","key","childData","val","push","title","post","addPost","removePost","remove","updatePost","set","variantIcon","success","CheckCircleIcon","warning","WarningIcon","error","ErrorIcon","info","InfoIcon","useStyles1","makeStyles","theme","backgroundColor","green","palette","dark","primary","main","amber","icon","fontSize","iconVariant","opacity","marginRight","spacing","message","display","alignItems","useStyles","root","position","bottom","right","ScrollTop","props","children","window","classes","trigger","useScrollTrigger","target","undefined","disableHysteresis","threshold","Zoom","in","onClick","event","anchor","ownerDocument","document","querySelector","scrollIntoView","behavior","block","role","className","MySnackbarContentWrapper","onClose","variant","other","Icon","SnackbarContent","clsx","aria-describedby","id","action","IconButton","aria-label","color","useStyles2","margin","paper","width","padding","marginBottom","boxSizing","border","boxShadow","typography","whiteSpace","center","connect","state","postReducer","dispatch","getPosts","handleSnackbar","actions","deletePost","useState","open","varient","snackbarState","setSnackbarState","handleClose","reason","Fragment","Toolbar","style","textDecoration","to","pathname","isEdit","Button","firebase","then","Grid","container","direction","map","item","Paper","Typography","component","marginLeft","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","Fab","size","body","common","white","marginTop","flexDirection","avatar","secondary","form","submit","withRouter","location","Container","maxWidth","CssBaseline","initialValues","onSubmit","values","history","render","handleChange","errors","touched","setFieldValue","handleSubmit","TextField","required","fullWidth","label","name","onChange","value","autoFocus","multiline","rows","ErrorPage","isPostLoaded","setIsPostLoaded","AppBar","length","exact","path","PostList","PostForm","initialState","filter","el","reducer","rootReducer","combineReducers","store","createStore","App","basename","Boolean","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e5105f3a.chunk.js","sourcesContent":["import * as actionTypes from \"./actionTypes\";\n\nexport const fetchAllPosts = posts => {\n  return {\n    type: actionTypes.FETCH_POST,\n    posts: posts\n  };\n};\n\nexport const removePost = key => {\n  return {\n    type: actionTypes.REMOVE_POST,\n    key: key\n  };\n};\n\nexport const updatePost = (key, post) => {\n  return {\n    type: actionTypes.UPDATE_POST,\n    post: post,\n    key: key\n  };\n};\n\nexport const addPost = post => {\n  return {\n    type: actionTypes.ADD_POST,\n    post: post\n  };\n};\n","export const FETCH_POST = \"FETCH_POST\";\nexport const REMOVE_POST = \"REMOVE_POST\";\nexport const UPDATE_POST = \"UPDATE_POST\";\nexport const ADD_POST = \"ADD_POST\";\n","import { initializeApp, database } from \"firebase\";\r\n\r\nvar config = {\r\n  apiKey: \"AIzaSyDbwNI5FhYkPtY4LXFMyMoRCruGDQKDnLQ\",\r\n  // authDomain: \"projectId.firebaseapp.com\",\r\n  databaseURL: \"https://my-app-a3576.firebaseio.com/\"\r\n  // storageBucket: \"bucket.appspot.com\"\r\n};\r\ninitializeApp(config);\r\n\r\n// Get a reference to the database service\r\n\r\nexport const firebaseDatabase = database();\r\n\r\nexport const fetchAllPost = async () => {\r\n  const posts = [];\r\n\r\n  await firebaseDatabase.ref(\"posts\").once(\"value\", snapshot => {\r\n    snapshot.forEach(childSnapshot => {\r\n      const key = childSnapshot.key;\r\n      const childData = childSnapshot.val();\r\n      posts.push({\r\n        key: key,\r\n        title: childData.title,\r\n        post: childData.post\r\n      });\r\n    });\r\n  });\r\n\r\n  return posts;\r\n};\r\n\r\nexport const addPost = async post => {\r\n  const key = await firebaseDatabase.ref(\"posts\").push(post).key;\r\n  return key;\r\n};\r\n\r\nexport const removePost = async key => {\r\n  await firebaseDatabase.ref(\"posts/\" + key).remove();\r\n};\r\n\r\nexport const updatePost = async (key, post) => {\r\n  await firebaseDatabase.ref(\"posts/\" + key).set(post);\r\n};\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport KeyboardArrowUpIcon from \"@material-ui/icons/KeyboardArrowUp\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Zoom from \"@material-ui/core/Zoom\";\r\nimport {\r\n  Paper,\r\n  Toolbar,\r\n  Typography,\r\n  useScrollTrigger,\r\n  Button,\r\n  IconButton,\r\n  Snackbar,\r\n  SnackbarContent\r\n} from \"@material-ui/core\";\r\nimport clsx from \"clsx\";\r\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\r\nimport ErrorIcon from \"@material-ui/icons/Error\";\r\nimport InfoIcon from \"@material-ui/icons/Info\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport { amber, green } from \"@material-ui/core/colors\";\r\nimport WarningIcon from \"@material-ui/icons/Warning\";\r\nimport * as actions from \"./../store/actions/post\";\r\nimport * as firebase from \"./../util/util\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst variantIcon = {\r\n  success: CheckCircleIcon,\r\n  warning: WarningIcon,\r\n  error: ErrorIcon,\r\n  info: InfoIcon\r\n};\r\n\r\nconst useStyles1 = makeStyles(theme => ({\r\n  success: {\r\n    backgroundColor: green[600]\r\n  },\r\n  error: {\r\n    backgroundColor: theme.palette.error.dark\r\n  },\r\n  info: {\r\n    backgroundColor: theme.palette.primary.main\r\n  },\r\n  warning: {\r\n    backgroundColor: amber[700]\r\n  },\r\n  icon: {\r\n    fontSize: 20\r\n  },\r\n  iconVariant: {\r\n    opacity: 0.9,\r\n    marginRight: theme.spacing(1)\r\n  },\r\n  message: {\r\n    display: \"flex\",\r\n    alignItems: \"center\"\r\n  }\r\n}));\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    position: \"fixed\",\r\n    bottom: theme.spacing(2),\r\n    right: theme.spacing(2)\r\n  }\r\n}));\r\n\r\nfunction ScrollTop(props) {\r\n  const { children, window } = props;\r\n  const classes = useStyles();\r\n  // Note that you normally won't need to set the window ref as useScrollTrigger\r\n  // will default to window.\r\n  // This is only being set here because the demo is in an iframe.\r\n  const trigger = useScrollTrigger({\r\n    target: window ? window() : undefined,\r\n    disableHysteresis: true,\r\n    threshold: 100\r\n  });\r\n\r\n  const handleClick = event => {\r\n    const anchor = (event.target.ownerDocument || document).querySelector(\r\n      \"#back-to-top-anchor\"\r\n    );\r\n\r\n    if (anchor) {\r\n      anchor.scrollIntoView({ behavior: \"smooth\", block: \"center\" });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Zoom in={trigger}>\r\n      <div onClick={handleClick} role=\"presentation\" className={classes.root}>\r\n        {children}\r\n      </div>\r\n    </Zoom>\r\n  );\r\n}\r\n\r\nScrollTop.propTypes = {\r\n  children: PropTypes.element.isRequired,\r\n  /**\r\n   * Injected by the documentation to work in an iframe.\r\n   * You won't need it on your project.\r\n   */\r\n  window: PropTypes.func\r\n};\r\nfunction MySnackbarContentWrapper(props) {\r\n  const classes = useStyles1();\r\n  const { className, message, onClose, variant, ...other } = props;\r\n  const Icon = variantIcon[variant];\r\n\r\n  return (\r\n    <SnackbarContent\r\n      className={clsx(classes[variant], className)}\r\n      aria-describedby=\"client-snackbar\"\r\n      message={\r\n        <span id=\"client-snackbar\" className={classes.message}>\r\n          <Icon className={clsx(classes.icon, classes.iconVariant)} />\r\n          {message}\r\n        </span>\r\n      }\r\n      action={[\r\n        <IconButton\r\n          key=\"close\"\r\n          aria-label=\"close\"\r\n          color=\"inherit\"\r\n          onClick={onClose}\r\n        >\r\n          <CloseIcon className={classes.icon} />\r\n        </IconButton>\r\n      ]}\r\n      {...other}\r\n    />\r\n  );\r\n}\r\n\r\nMySnackbarContentWrapper.propTypes = {\r\n  className: PropTypes.string,\r\n  message: PropTypes.string,\r\n  onClose: PropTypes.func,\r\n  variant: PropTypes.oneOf([\"error\", \"info\", \"success\", \"warning\"]).isRequired\r\n};\r\n\r\nconst useStyles2 = makeStyles(theme => ({\r\n  margin: {\r\n    margin: theme.spacing(1)\r\n  },\r\n  paper: {\r\n    width: \"75%\",\r\n    padding: theme.spacing(3, 2),\r\n    margin: \"auto\",\r\n    marginBottom: \"10px\",\r\n    boxSizing: \"border-box\",\r\n    border: \"1px solid grey\",\r\n    boxShadow: \"1px 2px grey\"\r\n  },\r\n  typography: {\r\n    margin: \"5px\",\r\n    whiteSpace: \"pre-wrap\"\r\n  },\r\n  center: {\r\n    margin: \"auto\"\r\n  }\r\n}));\r\n\r\nfunction PostList(props) {\r\n  const classes = useStyles2();\r\n  const [snackbarState, setSnackbarState] = useState({\r\n    open: false,\r\n    message: \"Dummmy\",\r\n    varient: \"error\"\r\n  });\r\n\r\n  function handleClose(event, reason) {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n\r\n    setSnackbarState({ ...snackbarState, open: false });\r\n  }\r\n\r\n  const getPosts = () => {\r\n    firebase.fetchAllPost().then(posts => {\r\n      props.getPosts(posts);\r\n      setSnackbarState({\r\n        open: true,\r\n        message: \"Successfully fetched the Posts\",\r\n        varient: \"success\"\r\n      });\r\n    });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Toolbar id=\"back-to-top-anchor\" />\r\n      <Toolbar>\r\n        <div className={classes.center}>\r\n          <Link\r\n            style={{ textDecoration: \"none\" }}\r\n            to={{\r\n              pathname: `/post`,\r\n              state: { isEdit: false }\r\n            }}\r\n          >\r\n            <Button>ADD NEW POST</Button>\r\n          </Link>\r\n\r\n          <Button\r\n            onClick={() => {\r\n              getPosts();\r\n            }}\r\n          >\r\n            REFRESH\r\n          </Button>\r\n        </div>\r\n      </Toolbar>\r\n\r\n      <Grid container direction={\"column\"}>\r\n        {props.posts\r\n          ? props.posts.map(post => {\r\n              return (\r\n                <Grid item key={post.key}>\r\n                  <Paper className={classes.paper}>\r\n                    <Grid container>\r\n                      <Grid item>\r\n                        <Link\r\n                          style={{ textDecoration: \"none\" }}\r\n                          to={{\r\n                            pathname: `/post`,\r\n                            state: { post, isEdit: true }\r\n                          }}\r\n                        >\r\n                          <Typography\r\n                            variant=\"h5\"\r\n                            component=\"h3\"\r\n                            className={classes.typography}\r\n                          >\r\n                            {post.title}\r\n                          </Typography>\r\n                        </Link>\r\n                      </Grid>\r\n                      <Grid item style={{ marginLeft: \"auto\" }}>\r\n                        <Button\r\n                          style={{ marginLeft: \"auto\" }}\r\n                          onClick={() => {\r\n                            firebase.removePost(post.key).then(key => {\r\n                              props.deletePost(post.key);\r\n                              setSnackbarState({\r\n                                open: true,\r\n                                message: \"Successfully deleted the Post\",\r\n                                varient: \"success\"\r\n                              });\r\n                            });\r\n                          }}\r\n                        >\r\n                          <DeleteIcon></DeleteIcon>\r\n                        </Button>\r\n                      </Grid>\r\n                    </Grid>\r\n\r\n                    <Typography className={classes.typography} component=\"p\">\r\n                      {post.post}\r\n                    </Typography>\r\n                  </Paper>\r\n                </Grid>\r\n              );\r\n            })\r\n          : null}\r\n      </Grid>\r\n      <Snackbar\r\n        anchorOrigin={{\r\n          vertical: \"bottom\",\r\n          horizontal: \"left\"\r\n        }}\r\n        open={snackbarState.open}\r\n        autoHideDuration={2000}\r\n        onClose={handleClose}\r\n      >\r\n        <MySnackbarContentWrapper\r\n          onClose={handleClose}\r\n          variant={snackbarState.varient}\r\n          message={snackbarState.message}\r\n        />\r\n      </Snackbar>\r\n\r\n      <ScrollTop {...props}>\r\n        <Fab color=\"secondary\" size=\"small\" aria-label=\"scroll back to top\">\r\n          <KeyboardArrowUpIcon />\r\n        </Fab>\r\n      </ScrollTop>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    posts: state.postReducer.posts\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    getPosts: handleSnackbar => dispatch(actions.fetchAllPosts(handleSnackbar)),\r\n    deletePost: key => dispatch(actions.removePost(key))\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(PostList);\r\n","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport { Formik } from \"formik\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport * as firebase from \"./../util/util\";\r\nimport * as actions from \"./../store/actions/post\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  \"@global\": {\r\n    body: {\r\n      backgroundColor: theme.palette.common.white\r\n    }\r\n  },\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\"\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1)\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2)\r\n  }\r\n}));\r\n\r\nfunction PostForm(props) {\r\n  const classes = useStyles();\r\n  let isEdit = false;\r\n  let post = { title: \"\", post: \"\" };\r\n  if (props.location.state) {\r\n    isEdit = props.location.state.isEdit;\r\n    post = props.location.state.post ? props.location.state.post : post;\r\n  }\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Add New Post\r\n        </Typography>\r\n\r\n        <Formik\r\n          initialValues={{\r\n            title: post.title,\r\n            post: post.post\r\n          }}\r\n          onSubmit={values => {\r\n            if (isEdit) {\r\n              firebase.updatePost(post.key, values).then(() => {\r\n                props.updatePost(post.key, values);\r\n                props.history.push(\"/\");\r\n              });\r\n            } else {\r\n              firebase.addPost(values).then(key => {\r\n                props.addPost({\r\n                  ...values,\r\n                  key: key\r\n                });\r\n                props.history.push(\"/\");\r\n              });\r\n            }\r\n          }}\r\n          render={({\r\n            values,\r\n            errors,\r\n            touched,\r\n            setFieldValue,\r\n            handleChange,\r\n            handleSubmit\r\n          }) => (\r\n            <form onSubmit={handleSubmit}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                id=\"title\"\r\n                label=\"Title\"\r\n                name=\"title\"\r\n                onChange={handleChange}\r\n                value={values.title}\r\n                autoFocus\r\n              />\r\n              <TextField\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                name=\"post\"\r\n                label=\"Post\"\r\n                value={values.post}\r\n                id=\"post\"\r\n                onChange={handleChange}\r\n                multiline\r\n                rows={8}\r\n              />\r\n\r\n              <Button\r\n                type=\"submit\"\r\n                fullWidth\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.submit}\r\n              >\r\n                {isEdit ? \"Update\" : \"Post\"}\r\n              </Button>\r\n            </form>\r\n          )}\r\n        />\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst matchStateToProps = state => {\r\n  return {\r\n    posts: state.postReducer.posts\r\n  };\r\n};\r\n\r\nconst matchDispatchToProps = dispatch => {\r\n  return {\r\n    addPost: post => dispatch(actions.addPost(post)),\r\n    updatePost: (key, post) => dispatch(actions.updatePost(key, post))\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  matchStateToProps,\r\n  matchDispatchToProps\r\n)(withRouter(PostForm));\r\n","import React from \"react\";\r\n\r\nexport default function ErrorPage() {\r\n  return <div>404 Not Found</div>;\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Route, Switch } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport * as actions from \"./../store/actions/post\";\r\nimport * as firebase from \"./../util/util\";\r\n\r\nimport PostList from \"./PostList\";\r\nimport PostForm from \"./PostForm\";\r\nimport ErrorPage from \"./ErrorPage\";\r\n\r\nfunction Home(props) {\r\n  const [isPostLoaded, setIsPostLoaded] = useState(false);\r\n\r\n  const getPosts = () => {\r\n    firebase.fetchAllPost().then(posts => {\r\n      props.getPosts(posts);\r\n    });\r\n  };\r\n  if (!isPostLoaded) {\r\n    getPosts();\r\n    setIsPostLoaded(true);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n      <AppBar>\r\n        <Toolbar>\r\n          <Link to={`/`} style={{ textDecoration: \"none\" }}>\r\n            <Button color=\"inherit\">\r\n              <Typography\r\n                variant=\"h6\"\r\n                style={{\r\n                  color: \"white\"\r\n                }}\r\n              >\r\n                {\"Home\"}\r\n              </Typography>\r\n            </Button>\r\n          </Link>\r\n          <Typography\r\n            variant=\"h6\"\r\n            style={{ marginLeft: \"auto\" }}\r\n          >{`Number of Posts: ${props.posts.length}`}</Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={PostList} />\r\n        <Route path=\"/post\" component={PostForm} />\r\n        <Route path=\"/\" component={ErrorPage} />\r\n      </Switch>\r\n    </React.Fragment>\r\n  );\r\n}\r\nconst matchStateToProps = state => {\r\n  return {\r\n    posts: state.postReducer.posts\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    getPosts: handleSnackbar => dispatch(actions.fetchAllPosts(handleSnackbar))\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  matchStateToProps,\r\n  mapDispatchToProps\r\n)(Home);\r\n","import * as actionTypes from \"../actions/actionTypes\";\n\nconst initialState = {\n  posts: []\n};\n\nconst addPost = (state, action) => {\n  const posts = [...state.posts, { ...action.post }];\n  return { posts };\n};\n\nexport const fetchAllPosts = (state, action) => {\n  return {\n    posts: action.posts\n  };\n};\n\nexport const removePost = (state, action) => {\n  const posts = state.posts.filter(el => el.key !== action.key);\n  return {\n    posts\n  };\n};\n\nexport const updatePost = (state, action) => {\n  const posts = state.posts.map(el => {\n    if (el.key !== action.key) {\n      return el;\n    } else {\n      return { ...action.post, key: action.key };\n    }\n  });\n  return {\n    posts\n  };\n};\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_POST:\n      return addPost(state, action);\n    case actionTypes.REMOVE_POST:\n      return removePost(state, action);\n    case actionTypes.UPDATE_POST:\n      return updatePost(state, action);\n    case actionTypes.FETCH_POST:\n      return fetchAllPosts(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import React from \"react\";\nimport Home from \"./components/Home\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { createStore, combineReducers } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport postReducer from \"./store/reducers/post\";\n\nconst rootReducer = combineReducers({\n  postReducer: postReducer\n});\nconst store = createStore(rootReducer);\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <BrowserRouter basename=\"react-redux-firbase-practice/\">\n        <Home />\n      </BrowserRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}